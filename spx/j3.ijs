NB. TITLE:  'A J Introduction'
NB.spxsection:J
0 : 0
J is executable mathematical notation.
The fourteen chapters of this lab illustrate
its use in experimenting with mathematical
ideas in a variety of topics.
To clarify ideas, enter your own experiments
(which you may do at any point).
)
2+3
X=: 2
Y=:3
X+Y
0 : 0
There is a rich set of primitives.
)
2 + 3
2 - 3
2 * 3
2 % 3
2 ^ 3
2 ^ 0.5
_2 ^ 0.5
2 ^. 3
0 : 0
Functions apply to arrays.
)
2 + 5 6 7
2 3 4 * 5 6 7
2 3 4 - 5 6 7
2 3 4 % 5 6 7
2 3 % 5 6 7    NB. error because arguments do not match
0 : 0
Some functions make arrays.
i.n is a list of the first n integers.
s $ v makes an array of shape s using the elements v
)
i. 7
1 + i. 7
2 ^ i. 7
(i. 7) ^ 0.5
3 5 $ 3 1 4 2
X=:3 5 $ 3 1 4 2
X * X
0 : 0
An array or function can be assigned a name by using =: (the copula).
)
i. 7
X=:i. 7
X
x ^ 2
power=: ^
X power 2
X power 0.5
0 : 0
A function can be monadic or dyadic, depending on whether
it applies to one argument (on the right) or to two
(on the left and right).
)
2 - 3   NB. Subtraction (dyadic)
-3      NB. Negation (monadic)
2 % 3   NB. Division
% 3     NB. Reciprocal
2 ^ 3   NB. Power
^0 1 2  NB. Exponential
0 : 0
The primitive functions include + - * % as well as ^
(power), ^. (log), > (greater than), >. (greater-of, or maximum),
+. (or/GCD), *. (and/LCM), | (residue or modulo), etc.
All of these can be monadic or dyadic, and apply to arrays.
)
2 ^ 3 4 5 6
2 ^ 0.5 3 _5
_2 ^ 0.5 6 7
0 0 1 1 +. 0 1 0 1
2 3 4 5 +. 10 20 30 40
2 3 4 5 *. 10 20 30 40
2 3 4 5 | 10 20 30 40
2 3 4 5 <. 10 20 30 40
2 3 4 5 >. 10 20 30 40
0 : 0
Adverbs modify verbs (functions) to produce new verbs.
For example, the adverb / inserts its verb argument between
the items of its argument.
Thus, +/ is summation and */ is product. These are the "big sigma"
and "big pi" of conventional notation. Moreover, / can be
applied to any function: >./ is maximum, <./ is minimum,
+./ is or or GCD, *./ is and or LCM, etc.
)
X=: 1 + i. 7
X
+/ X
*/ X
>./ X
<./ X
+./ X
*./ X
0 : 0
If f is a verb (function), then f/ is a verb, and,
like any other verb, it can be monadic or dyadic.
The monadic meaning is "insert". The dyadic meaning is "table",
that is, a function table.
Function tables are a good way to organize systematic
experimentation on unfamiliar functions.
)
X=:i.9
X
x +/ X
x */ X
x </ X
x >/ X
x >./ X
x <./ X
x +./ X
x *./ X
x |/ X
0 : 0
The Hilbert matrix is a simple function on the addition table.
As shown below, its pattern is more apparent in the extended precision (rational) domain.
Although Hilbert matrices are notoriously unstable
under inversion, the matrix inverse (%.) gives an exact
integer result (as shown below):
)
X=:i.7
X +/ X
% 1 + X +/ X
Y=:i.7x   NB. The final X gives extended precision
H=:% 1 + Y +/ Y
H
%. H
0 : 0
The "triangle" of Pascal is an example of a function
table, based on the binomial coefficient function ! .
An advantage of treating it as a table rather than as
a triangle is that matrix operations (such as matrix
inverse) can be applied to it.
)
X=: i. 7
X !/ X
m=: X !/ X
%. m       NB. The alternating binomial coefficients
+/ m
+/ %. m
0 : 0
Prefix is another adverb. f\ applies f to the prefixes
of the argument.
The monad < (box) is helpful in understanding prefix.
)
X=: 1+i.7
X
+/\ X    NB. Subtotals
<\ X
*/\ X    NB. Progressive products
<./\ X
>./\ X
+./\ X
*./\ X
0 : 0
The dyadic function X{Y indexes Y by X If p is
a permutation p, then p{Y permutes Y by p.
)
p=:9 ?. 9    NB. A random permutation
p
p { p
p { p { p
6 9$p
{/ 6 9$p
{/\ 6 9$p
0 : 0
{/ (m,#p) $ p inserts { between m copies of the permutation,
and computes the m-th power of p.
The corresponding prefixes, {/\ (m,#p) $ p, are the successive powers
of p.
)
p
p{p
p{p{p
{/ 6 9 $ p
{/\6 9 $ p
0 : 0
C. p computes the cycles of the permutation p. The
Least Common Multiple (*./) of the cycle lengths
is the order of the subgroup
generated by p.
)
p
C. p
#&> C. p
*./ #&> C. p
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Patterns: color
0 : 0
 The pattern seen in
 an addition table
 can be emphasized
 by producing a
 window in which
 equal values in the
 table are assigned
 the same color.
 To continue, press
 Esc to remove the
 window, or click
 the mouse on the
 main window to
 return focus to it.
)
require 'plot viewmat'
color =: viewmat
X=:i. 5
X +/ X
color X +/ X
0 : 0
 The color window can
 be moved away from
 text that it may
 obscure by clicking
 on the top bar,
 holding the button
 down, and dragging
 it to a new position
 before releasing
 the mouse button:
)
X -/ X       NB. Subtraction table
color X -/ X
0 : 0
When applied to a list of positive and negative
integers, the multiplication table provides an
interesting pattern.
)
pn=: i: _3
pn
pn */ pn
color pn */ pn
0 : 0
The monad * is called the "signum" or "sign" function.
When applied to a multiplication table, it shows
the pattern of positive and negative results
produced by multiplication.
)
pn
*pn
* pn */ pn
color * pn */ pn
0 : 0
3 | 5 gives the "remainder" or "residue" on dividing 3 into 5.
Study the following remainder table and (before
advancing to the next panel), try to predict the
appearance of coloring the 2-residue of the addition
table given by 2 | (i.8) +/ (i.8).
)
Y=: 1 + i. 6
Y |/ Y
color Y |/ Y
0 : 0
)
2 | (i.8) +/ (i.8)
color 2 | (i.8) +/ (i.8)
0 : 0
Residues of binomial coefficient tables provide
examples of fractals (which "replicate according to their
own pattern").
This is illustrated in this and the next three panels.
)
2 | (i.2) !/ (i.2)
color 2 | (i.2) !/ (i.2)
0 : 0
)
2 | (i.4) !/ (i.4)
color 2 | (i.4) !/ (i.4)
0 : 0
)
2 | (i.16) !/ (i.16)
color 2 | (i.16) !/ (i.16)
0 : 0
)
3 | (i.16) !/ (i.16)
color 3 | (i.16) !/ (i.16)
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Patterns: Plots
0 : 0
The square function (*:) applied to a list X
may be plotted against its argument as follows:
)
require'plot'
X=: i.5
Y=: *: X
X;Y
plot X;Y
0 : 0
A plot that shows vertical lines to the argument axis
may be produced similarly as follows.
)
PLOT=: 'stick,line'&plot
PLOT X;Y
0 : 0
Combined plots of two or more functions
are produced as follows.
)
z=: %: X  NB. Square root
X;>Y;z
PLOT X;>Y;z
0 : 0
The sine and cosine functions may be plotted as follows.
)
sin=: 1&o.
cos=: 2&o.
X=: 0.1 * i: 21
X
PLOT X;>(sin X);(cos X)
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Patterns: Variation
0 : 0
More general patterns may be observed by comparing
successive items produced in applying a function
to a systematic list argument.
Items may be compared in various ways, notably by
subtraction and by division.
)
] X=:i. 8        NB. The identity function ] displays X
] Y=: X ^ 2
] z=: 2 ^ X
}. Y             NB. Drop first of Y
}: Y             NB. Drop last of Y
(}. Y) - (}: Y)  NB. Subtraction of adjacent items of Y
(}. z) % (}: z)  NB. Ratio of adjacent items of z
0 : 0
We now define functions called dif and rat to
perform these comparisons.
)
dif=: }. - }:
rat=: }. % }:
dif Y
dif dif Y
rat z
rat rat z
dif rat z
c=:X*x*X  NB. cube
dif c
dif dif c
dif dif dif c
0 : 0
f ^: n is "f to the power n", that is, n applications
of the function f.
)
q=:X*x*X*x*X
q
dif dif q
dif ^:2 q
dif ^: 0 1 2 3 4 5 6 q
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Series
0 : 0
In the list a=: 1 3 5 7 9 11, the expression 2{a
selects the item with the value 5, and 2 is said
to be its "index".
The function f=: >:@+: gives each element of a as a function
of its index, and is said to define the "series" a. This
is true only for arguments in the list i.#a, but if we
assume (or assert) that f applies to every index, then it
is said to define an "infinite" series.
)
a=: 1 3 5 7 9 11
2{a
7{a
f=:>:@+:  NB. >: is increment, and +: is double
f 2
f 7
f i.20
0 : 0
Using the list b=: 0 _2 _4 0 16 50 108 we can define a
function for the corresponding series. We will use
repeated application of the difference function
dif=:}.-}: to obtain the coefficients for the
falling factorial polynomial ffp=:p.!._1. These matters will be discussed more fully in a subsequent chapter on polynomials.
)
b=:0 _2 _4 0 16 50 108
dif=:}.-}:
dif^:0 1 2 3 4 b
c=:0 _2 0 6 0       NB. First column of table of differences
]ncoeff=: c % !i.#c NB. Normalized coefficients
ffp=:p.!._1         NB. Falling factorial polynomial
ncoeff ffp i.7      NB. Reproduces b
f=: ncoeff&ffp      NB. A function that defines (and extends) the series
f i. 15
0 : 0
 Try further examples, as illustrated below.
)
b=: 3+(i.7)^5
b
dif^:(i.7) b
c=: {."1 dif^:(i.7) b
c
(c%!i.#c) ffp i.10
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Polynomials
0 : 0
The expression 2*X^3 is a monomial (single name),
and a sum of monomials is a polynomial.
The expression c p. X is a polynomial with "coefficients" c.
)
X=:5
X^3
2*X^3
X=:0 1 2 3 4 5
2*X^3
c=:3 1 4 2
c p. X
(3*X^0)+(1*X^1)+(4*X^2)+(2*X^3)
0 : 0
Polynomials are important for a number of reasons:
 1. A sum of polynomials is a polynomial
 2. A product of polynomials is a polynomial
 3. The derivative of a polynomial is a polynomial
 4. The integral of a polynomial is a polynomial
 5. Polynomials serve to approximate many functions, such as
   sine, cosine, and exponential.
)
c=:1 3 3 1
d=:4 3 2 1
e=:1 2 1
(c p. X)+(d p. X)
(c+d) p. X
(c p. X)*(e p. X)
1 5 10 10 5 1 p. X
(1%!i.10) p. X
^ X
0 : 0
Since (e,0) p. X is equivalent to e p. X, coefficients that
differ in number of items can be added as illustrated below.
Moreover, the coefficients of a product can be obtained from
the multiplication table by using the adverb /. to sum its diagonals.
)
c+(e,0)
((e,0) p. X) = (e p. X)
c */ e
</. c */ e   NB. Box diagonals
+//. c */ e  NB. Sum diagonals
(1 5 10 10 5 1 p. X) = ((c p. X) * (e p. X))
0 : 0
The derivative of a polynomial is obtained  by multiplying
each monomial by its exponent, and reducing the exponent by 1.
Equivalently, the coefficients of the derivative of c p. X
are obtained by multiplying c by the exponents i.#c, and
dropping the first item.
)
c
i.#c
c * i. # c
der=:}. c * i. # c NB. Coefficients of derivative
der
require 'plot'
PLOT=:'stick,line'&plot
PLOT X;>(c p. X);(der p. X)
0 : 0
Conversely, the coefficients of the integral of c p. X
are obtained by dividing c by 1+i.#c, and appending a leading
constant of integration (for which we will use 20).
)
c
1+i.#c
c % 1+i.#c
int=: 20 , c % 1+i.#c
int
PLOT X;>(c p. X);(int p. X)
0 : 0
We now define functions DER and INT for the derivative
and integration of coefficients.
)
DER=:}.@(]*i.@#)
INT=:[,(] % >:@i.@#@]) NB. >: is the "increment" function
DER c
20 INT c
DER 20 INT c
0 : 0
If ce is a list of coefficients that approximates
the exponential, then DER ce is approximately equal
to ce.
)
ce=:1 % ! i. 7
ce
ce p. 0 1 2 3 4
^ 0 1 2 3 4
DER ce
DER DER ce
1 INT ce
0 : 0
The falling factorial function is related to the power function,
obtained as a "variant" of it by using ^ !. _1.
The falling factorial polynomial ffp=: p. !. _1 (used in the
chapter on series) is a polynomial based on the falling
factorial rather than the power.
)
X=:5
e=:4
X^e
X*x*X*x
ff=: ^!._1  NB. Falling factorial function
X ff e
(X-0)*(X-1)*(X-2)*(X-3)
*/(X-i.e)
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Taylor Series
0 : 0
A series that can be used as coefficients of a polynomial
to approximate a function f is called the Taylor series
for f. Taylor series are provided by the adverb t. as illustrated below.
)
^ t. 0  NB. Leading item of Taylor series for the exponential
^ t.i.7 NB. First seven items of TS for ^
sin=: 1&o.
cos=: 2&o.
sin t. i.7
cos t. i.7
i:3
(cos t. i.7) p. i:3
cos i:3
0 : 0
The expression ! x: 20 gives factorial 20 to complete
precision. Moreover, 2 % x:3 gives the result of dividing 2 by
3 in rational form.
)
! 20             NB. Approximation in "scientific notation"
! x: 20
2%3
2%x: 3
]a=:% 1 + i. x:6 NB. Reciprocals in rational form
a +/ a           NB. Addition table
0 : 0
)
a
a */ a
a %/ a
^ t. i. x: 10 NB. Taylor series in rational form
0 : 0
A joint display of Taylor series.
)
>((^t.);(sin t.);(cos t.)) i. x:10
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Binomial Coefficients
0 : 0
Matrix products and inverses of binomial coefficient
tables give interesting results.
)
]bct=: (i.7) !/ (i.7)
]abct=: %. bct NB. Inverse gives alternating binomial coefficients
+/bct          NB. Column sums
2^i.7
+/abct         NB. Not all zeros
0 : 0
)
mp=: +/ . * NB. Matrix product function
bct mp abct
bct mp bct
bct mp bct mp bct
0 : 0
Since the matrix products of abc are sums of products
of binomial coefficients, any independent expression
that gives these "powers" of bct yields a host of identities
concerning binomial coefficients.
)
bct4=:bct mp bct mp bct mp bct
bct4       NB. What is the developing pattern?
bct4 % bct NB. pattern clarified by element-by-element division
0 : 0
We can now use a subtraction table as an exponent to
give a result equal to bct4 (the fourth "power" of bct).
)
]st=: - (i.7) -/ (x: i.7)
4 ^ st
bct * 4 ^ st NB. Enter bct4 to compare with this result
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Geometry
0 : 0
A 4-by-3 table can be used to represent coordinates
of the 4 vertices of a tetrahedron in 3-space, and
an n-by-2 table represents the n vertices of a polygon.
)
]tri=:>0 0;7 4;3 0 NB. Base length 3 and altitude 4
tri,.0.5           NB. Border with column of halves
det=:-/ . *        NB. Determinant function
det tri,.0.5       NB. Signed area (<0 vertices in clockwise order)
area=: det@(,.&0.5)NB. Define area function
area tri
0 : 0
Analysis of this use of the determinant for triangles
(and tetrahedrons) may be found in Klein "Elementary
Mathematics From an Advanced Viewpoint".
Because areas of triangles are signed, the area of any
polygon can be obtained by adding lines to triangulate
it, and summing the areas.
)
]cctri=:0 2 1{tri NB. Counterclockwise triangle
area cctri
0 : 0
A regular pentagon is obtained by appying the cos
and sin to angles at intervals of 2r5p1 (two-fifths
of pi), and displayed by applying plot to the
boxed X and Y coordinates.
)
cos=:2&o.
sin=:1&o.
]pent=:(cos,.sin) 2r5p1 * i. 5
require 'plot'
|:pent    NB. Transpose table
;/|: pent NB. Box rows (columns of pent)
(fix=: ;/@|:) pent
plot fix pent
0 : 0
The missing line from the last vertex to the first
can be provided as follows.
)
0 1 2 3 4 0{pent
plot fix 0 1 2 3 4 0{pent
0 : 0
An interchange of indices 1 and 2 illustrates the possibility
of an"improper polygon" whose sides cross.
)
0 2 1 3 4 0{pent
plot fix 0 2 1 3 4 0{pent
0 : 0
The pentagon may be triangulated as follows:
)
plot fix 0 1 2 3 4 0 2 0 3 0 4{pent
0 : 0
These triangulated components
of the pentagon can be selected and boxed,
and their areas can be determined, as follows:
)
]bt=: (0 1 2{pent);(0 2 3{pent);(0 3 4{pent)
area&> bt
+/ area&> bt NB. Total area of pentagon
0 : 0
Although the function area gives signed results
according to the clockwise or counter-clockwise
order of the vertices, these areas are all of
the same sign.
This occurs because pent is a convex polygon,
and the significance of signed areas is not
apparent. We will make it so by using a concave
polygon, obtained by multiplying the second
vertex of pent by zero.
)
]concave=: 1 0 1 1 1*pent
plot fix 0 1 2 3 4 0{concave
0 : 0
The boxed coordinates of the triangular components
of the concave pentagon are obtained as shown below.
Their areas are not all of the same sign, but sum to
give its total area.
)
]btc=: (0 1 2{concave);(0 2 3{concave);(0 3 4{concave)
area&> btc
+/area&> btc
0 : 0
The displacement from one vertex to the next
can be obtained by rotating the table of vertices
up by one place, and subtracting from it the
original table.
)
tri
1 |. tri
(1 |. tri)-tri
disp=: 1&|. - ]
disp tri
0 : 0
The lengths of the sides can then be obtained from
these displacements as the square root of the sum
of the squares.
)
length=: %:@(+/)@(]*])"1
]sides=:length disp tri
0 : 0
Heron's formula for the (unsigned) area of a
triangle is the square root of the product
of the semiperimeter with the semiperimeter
less each of the sides.
)
sp=: %&2 @ (+/)
sp sides
(sp , sp - ]) sides
*/ (sp , sp - ]) sides
%: */(sp , sp - ]) sides
area tri NB. Compare with signed area
Heron=: %: @ (*/) @ (sp , sp - ])
Heron sides
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Slope and Rate of Change
0 : 0
The rate of change of a function is an important attribute:
for example, the rate of change of the sine is the cosine,
the rate of change of the exponential is itself,
and the rate of change of the nth power is n times the
(n-1)th power.
Although the instantaneous rate of change at a point may be difficult
to determine, the average rate of change over a non-zero interval i is
straightforward.
)
f=: 3:*]*]        NB. three times the square
X=:0 1 2 3 4 5
i=:0.1
f X
f X+i
(f X+i)-(f X)     NB. Rise over interval
((f X+i)-(f X))%i NB. Average rate of change
0 : 0
We use the term "slope" for the average rate of change,
because the graph of a function at intervals of i exhibits the
average rate of change as the slopes of the lines connecting
successive points.
)
require'plot'
PLOT=:'stick,line'&plot
i*i.20
f i*i.20
PLOT f i*i.20
0 : 0
For a small interval the average slope approaches
the slope AT each point, a result that is called the derivative
of the function.
)
smi=:0.001
PLOT f smi*i.100
0 : 0
The derivative (the slope AT a point) should be given by a zero interval,
but this is the meaningless division of a zero rise by
a zero interval.
However, the case of a power function can be analyzed to
give a simple meaningful result. For example, the cube
function applied to X+i gives
  (X*x*X)+(3*X*x*i)+(3*X*i*i)+(i*i*i)
 Sutraction of the cube of X gives:
  (3*X*x*i)+(3*X*i*i)+(i*i*i)
 which can be divided by i to yield:
  (3*X*x)+(3*X*i)+(i*i)
 Since i is zero, the last two terms can be dropped to yield
 3*X*x (that is, three X squared, or formally, 3:*]*]) for the slope with  zero interval.
)
0 : 0
Similar analysis for other powers gives n*X^(n-1) as the
derivative of X^n Moreover, the derivative of a multiple of a
function is the same multiple of the derivative, and the derivative
of a sum of functions is the sum of their derivatives.
These observations extend the analysis to polynomials, with the simple
consequence that the derivative of the polynomial c&p. is
the polynomial d&p., where d=:}. c*i.#c.
)
]c=:1&o. t. i. x:8 NB. Taylor series for sin
c*i.#c
]d=:}.c*i.#c       NB. Coefficients for derivative (cos)
d&p. Y=:0.1*i:30   NB. Range from about -pi to pi
PLOT Y;>(c&p. Y);(d&p. Y)
0 : 0
The foregoing shows that the essential notion of the
calculus (that is, the derivative) can be treated without
resort to the general analysis of limits, provided
that attention is restricted to polynomials or to
rational functions obtained as the ratio of polynomials.
Since polynomials and rationals can be used to approximate all
the functions of interest in an introductory course in
calculus, this is not a serious restriction. This approach to
the calculus will be pursued in the next chapter.
)
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Calculus
0 : 0
We will restrict attention to polynomials, and will
use the results developed in the chapter on Slopes.
)
DER=: }. @ (] * i.@#)     NB. Gives coefficients of derivative
INT=: [ , (] % >:@i.@#@]) NB. Gives coefficients of integral
c=: 1 3 3 1
DER c
4 INT c                   NB. Constant of integration 4
DER 4 INT c
(DER c) p. X=:i.7         NB. Evaluation of derivative polynomial
c&p. d.1 X                NB. First derivative of c&p.
0 : 0
The operator d. gives successive derivatives of various orders
(using d.1 and d.2 and d.3, etc.), as well as integrals (using
d._1 d._2 etc.).
)
c&p. X
c&p. d.1 X
c&p. d.2 X
c&p. d._1 X
c&p. d._2 X
c&p. d._1 d._1 X
c&p. d._1 d.1 X
0 : 0
The Taylor adverb t. gives the coefficients of
derivatives and integrals.
>From the results shown below it is clear that d._1
uses a zero constant of integration. The effect of
any other can be obtained by adding it.
)
c&p. d.1 t. i.7
c&p. d.2 t. i.7
c&p. d._1 t. i.7
(4: + c&p. d._1) t. i.7
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Theorems and proofs
0 : 0
A theorem is an assertion that one expression L,the left limb, is equivalent to another R, and may be expressed as the function T=. L -: R . A theorem may also be called a tautology, a function that yields 1 (true) for any argument. For example:
)
L=: +/@i.             NB. Sum of integers
R=: (] * ] - 1:) % 2:
T=: L -: R
(T ; L ; R ; i.) 6
0 : 0
We can also assign the name n to the right argument function ] to allow a function such as R1 to be written more readably for a beginner. Thus:
)
n=: ]
R=: (n*n-1:)%2:
R 6
0 : 0
A proof is a sequence of equivalent expressions that lead in justifiable steps from a left limb to a right. We will write one expression below another to assert that it is equivalent to the one above it, possibly annotating it with the justification to provide a formal proof:
L        NB. Theorem 1
+/@i.    NB. Definition of L
)
0 : 0
The foregoing proof can be illuminated by entering each expression followed by an argument, and observing that each gives the same result. Any mis-step in a proof will likely show an anomolous result.
An expression can be conveniently entered by moving the cursor up to it, pressing enter to bring it to the input area, modifying it by inserting the argument, and then pressing enter. Moreover, partial expressions may be entered to observe their results. Thus:
)
L 6
+/@i. 6
+/@|.@i.6 NB. Sum is associative  and commutative (|. reverses)
(((+/@i.)+(+/@|.@i.)) % 2:)6  NB. Half sum of equal quantities
R 6
(i. + |.@i.) 6 NB. To show that this is indeed a list of n-1
0 : 0
How would you express the second step (+/@|.@i.6)
in conventional notation (without English or arm-waving).
Remember that Sigma from 5 to 0 is a sum over an empty list)
Reproduce other of the proofs in pure conventional notation.
)
0 : 0
The following is a similar proof that the sum of the first n odd integers equals the square of n:
(odds=: 1: + 2: * i.)        NB. First odd integers
+/@(1: + 2: * i.)            NB. Sum of odds
(n + +/@(2: * i.))           NB. Sum of n ones is n
(n + 2: * +/@i.)             NB. Sum of twice is twice sum
(n + 2: * (n * n - 1:) % 2:) NB. Result of preceding theorem
(n + n * n - 1:)             NB. Simple algebra
(n * n)                      NB. Simple algebra
*:                           NB. Definition of square
)
0 : 0
An inductive proof is based (explicitly or implicitly) on a recursive definition of a function. Recursive definition is treated in
the next chapter.
)
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Recursion
0 : 0
If a function recurs in the expression that defines it, the function is said to be recursively defined. Such a definition must be supplemented by a definition for some specific argument, using an expression that does not make use of the function being defined.
For example, the factorial of the argument j may be defined by j * f j-1 (or more formally by ] * f@<:), supplemented by the definition 1:
(the constant function 1) for the case j=: 0. Thus:
)
f=: 1:`(]*f@<:) @. *
f 5
f"0 i. 6 NB. The function f is applied to each rank-0 cell
0 : 0
In the foregoing definition, the signum function * yields 0 if the argument is zero, and 1 if it is greater than zero.
Consequently, the agenda @. chooses the last element of the gerund 1:`(]*f@<:) each time until the argument (repeatedly decremented by <:) becomes zero, in which case it chooses the constant function 1:, thus terminating the process.
Alternatively, the imposition of zero rank could be incorporated in the recursive definition:
)
f=: 1:`(]*f@<:) @. * " 0
f i. 6
0 : 0
The reference to f within the definition works only because the name f is assigned to the function defined; we may instead use the symbol $: for self-reference to define an anonymous function to which any name may be assigned:
)
1:`(]*$:@<:) @. * " 0 i. 6
factorial=: 1:`(]*$:@<:) @. * " 0
factorial i. 6
0 : 0
Quicksort is an interesting example of the use of recursion: the
basic procedure is the segregation of
the items of an argument list according to whether they
are less than the leading item, equal to it, or greater
than it.
This procedure is applied recursively to the
segregated lists, repeating as long as the argument has
more than one item.
)
Y=: 52 9 65 41 70 91 52 76 26 4 73 32 63
less=:    ([ < {.) # ]
equal=:   ([ = {.) # ]
greater=: ([ > {.) # ]
less Y
(less;equal;greater) Y
qs=: ]`($:@less, equal, $:@greater) @. (# > 1:)
qs Y
0 : 0
Details of the action of the recursive definition
of quicksort can be analyzed as illustrated below.
)
seg=: less;equal;greater
Y
seg Y
> {. seg Y       NB. Select and open first (less-than)box
seg > {. seg Y   NB. Segregate "less-than" list
; seg > {. seg Y NB. Raze the boxed list
> {: seg Y       NB. Select and open last (greater-than) list
seg > {: seg Y
0 : 0
Continuation may lead to empty boxes.
)
seg Y
> {. seg Y
seg > {. seg Y
> {. seg > {. seg Y
seg > {. seg > {. seg Y
; seg > {. seg > {. seg Y
0 : 0
This is the end of this chapter. To continue with
the next chapter, advance as usual. But to select any other
chapter, click on Chapters under the Studio menu.
)
NB.spxsection:Permutations and Anagrams
0 : 0
A permutation (re-ordering) of the letters of a word
is called an anagram, and may be performed by the
anagram function denoted by A. -- an anagram may or may not be an English word.
)
w=:'ART'
2 A. w
4 A. w
!# w  NB. The number of anagrams (permutations) of w
i.!#w NB. The indices of all !3 anagrams of w
(i.!#w) A. w
0 : 0
The list to be permuted may be numbers, and the result may be
used to index any list of the correct number of items.
)
]top=: (i.6)A.0 1 2 NB. Table of permutations
top { 'ART'
0 : 0
The right argument may be any list of items, such as a
boxed list of words.
)
]boxedlist=:'zero';'one';'two'
top{boxedlist
0 : 0
This indexed list can also be produced by direct
use of A. and the two equivalent results will be displayed
side-by-side (separated by a boxed empty list provided
by a:).
)
(top { boxedlist) ,. a: ,. ((i.6) A. boxedlist)
0 : 0
(i.!4) A. 0 1 2 3 (or (i.!4) A. 'ABCD') produces a
complete permutation table of order 4. Coloring this
table gives a pattern that "shows why" there are 4*3*2*1
(that is, !4) permutations of order 4.
The color window is better if expanded (by
clicking in the middle tiny square at upper right of
the window).
)
require 'viewmat'
color=:viewmat
color (i.!4) A. 'ABCD'
0 : 0
A list (such as p=: 3 0 4 1 2 5) that is a permutation of its indices is
called a permutation vector, and p&{ is the corresponding permutation
function.
This permutation can also be prescribed by stating that position 3
receives the item from position 1, that that position receives
from position 0, and that (completing the cycle) receives from position
3; further that position 4 receives from 2, which receives from 4; and position 5 (a cycle of one) remains in place.
A boxed list of this cycle representation is given by the function C. .
)
p=: 3 0 4 1 2 5
p&{ 'ABCDEF'
C. p
(C. p)&C. 'ABCDEF'
0 : 0
We now box each row of the table p4 of permutations of
order 4, append to the result the cycle representations of p4, and transpose
the whole for easier reading.
)
<"1 p4=: (i.!4) A. i.4
|: (<"1 p4=: (i.!4) A. i.4) ,. (C. p4)
0 : 0
This is the end of the lab.
)
